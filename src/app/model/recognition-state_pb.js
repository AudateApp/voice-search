// source: src/app/model/recognition-state.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.Error', null, global);
goog.exportSymbol('proto.Error.ErrorType', null, global);
goog.exportSymbol('proto.Idle', null, global);
goog.exportSymbol('proto.RecognitionState', null, global);
goog.exportSymbol('proto.RecognitionState.StateCase', null, global);
goog.exportSymbol('proto.Recognizing', null, global);
goog.exportSymbol('proto.Recognizing.Status', null, global);
goog.exportSymbol('proto.Recognizing.Transcript', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RecognitionState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.RecognitionState.oneofGroups_);
};
goog.inherits(proto.RecognitionState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RecognitionState.displayName = 'proto.RecognitionState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Error.displayName = 'proto.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Idle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Idle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Idle.displayName = 'proto.Idle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Recognizing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Recognizing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Recognizing.displayName = 'proto.Recognizing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Recognizing.Transcript = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Recognizing.Transcript.repeatedFields_, null);
};
goog.inherits(proto.Recognizing.Transcript, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Recognizing.Transcript.displayName = 'proto.Recognizing.Transcript';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.RecognitionState.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.RecognitionState.StateCase = {
  STATE_NOT_SET: 0,
  ERROR: 1,
  IDLE: 2,
  RECOGNIZING: 3
};

/**
 * @return {proto.RecognitionState.StateCase}
 */
proto.RecognitionState.prototype.getStateCase = function() {
  return /** @type {proto.RecognitionState.StateCase} */(jspb.Message.computeOneofCase(this, proto.RecognitionState.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RecognitionState.prototype.toObject = function(opt_includeInstance) {
  return proto.RecognitionState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RecognitionState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RecognitionState.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.Error.toObject(includeInstance, f),
    idle: (f = msg.getIdle()) && proto.Idle.toObject(includeInstance, f),
    recognizing: (f = msg.getRecognizing()) && proto.Recognizing.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RecognitionState}
 */
proto.RecognitionState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RecognitionState;
  return proto.RecognitionState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RecognitionState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RecognitionState}
 */
proto.RecognitionState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Error;
      reader.readMessage(value,proto.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.Idle;
      reader.readMessage(value,proto.Idle.deserializeBinaryFromReader);
      msg.setIdle(value);
      break;
    case 3:
      var value = new proto.Recognizing;
      reader.readMessage(value,proto.Recognizing.deserializeBinaryFromReader);
      msg.setRecognizing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RecognitionState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RecognitionState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RecognitionState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RecognitionState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Error.serializeBinaryToWriter
    );
  }
  f = message.getIdle();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Idle.serializeBinaryToWriter
    );
  }
  f = message.getRecognizing();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Recognizing.serializeBinaryToWriter
    );
  }
};


/**
 * optional Error error = 1;
 * @return {?proto.Error}
 */
proto.RecognitionState.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, proto.Error, 1));
};


/**
 * @param {?proto.Error|undefined} value
 * @return {!proto.RecognitionState} returns this
*/
proto.RecognitionState.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.RecognitionState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RecognitionState} returns this
 */
proto.RecognitionState.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RecognitionState.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Idle idle = 2;
 * @return {?proto.Idle}
 */
proto.RecognitionState.prototype.getIdle = function() {
  return /** @type{?proto.Idle} */ (
    jspb.Message.getWrapperField(this, proto.Idle, 2));
};


/**
 * @param {?proto.Idle|undefined} value
 * @return {!proto.RecognitionState} returns this
*/
proto.RecognitionState.prototype.setIdle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.RecognitionState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RecognitionState} returns this
 */
proto.RecognitionState.prototype.clearIdle = function() {
  return this.setIdle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RecognitionState.prototype.hasIdle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Recognizing recognizing = 3;
 * @return {?proto.Recognizing}
 */
proto.RecognitionState.prototype.getRecognizing = function() {
  return /** @type{?proto.Recognizing} */ (
    jspb.Message.getWrapperField(this, proto.Recognizing, 3));
};


/**
 * @param {?proto.Recognizing|undefined} value
 * @return {!proto.RecognitionState} returns this
*/
proto.RecognitionState.prototype.setRecognizing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.RecognitionState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RecognitionState} returns this
 */
proto.RecognitionState.prototype.clearRecognizing = function() {
  return this.setRecognizing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RecognitionState.prototype.hasRecognizing = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Error}
 */
proto.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Error;
  return proto.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Error}
 */
proto.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Error.ErrorType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Error.ErrorType = {
  UNKNOWN: 0,
  NOT_SUPPORTED: 1,
  PERMISSION_NOT_GRANTED: 2,
  NO_AUDIO_INPUT_DEVICE: 3,
  NO_CONNECTION: 4
};

/**
 * optional ErrorType type = 1;
 * @return {!proto.Error.ErrorType}
 */
proto.Error.prototype.getType = function() {
  return /** @type {!proto.Error.ErrorType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Error.ErrorType} value
 * @return {!proto.Error} returns this
 */
proto.Error.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.Error.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Error} returns this
 */
proto.Error.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Idle.prototype.toObject = function(opt_includeInstance) {
  return proto.Idle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Idle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Idle.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Idle}
 */
proto.Idle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Idle;
  return proto.Idle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Idle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Idle}
 */
proto.Idle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Idle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Idle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Idle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Idle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Recognizing.prototype.toObject = function(opt_includeInstance) {
  return proto.Recognizing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Recognizing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Recognizing.toObject = function(includeInstance, msg) {
  var f, obj = {
    transcript: (f = msg.getTranscript()) && proto.Recognizing.Transcript.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    audioLevel: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Recognizing}
 */
proto.Recognizing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Recognizing;
  return proto.Recognizing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Recognizing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Recognizing}
 */
proto.Recognizing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Recognizing.Transcript;
      reader.readMessage(value,proto.Recognizing.Transcript.deserializeBinaryFromReader);
      msg.setTranscript(value);
      break;
    case 2:
      var value = /** @type {!proto.Recognizing.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAudioLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Recognizing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Recognizing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Recognizing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Recognizing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTranscript();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Recognizing.Transcript.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAudioLevel();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Recognizing.Status = {
  UNKNOWN: 0,
  START: 1,
  TRANSCRIBING: 2,
  NO_SPEECH_DETECTED: 3,
  END: 4
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Recognizing.Transcript.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Recognizing.Transcript.prototype.toObject = function(opt_includeInstance) {
  return proto.Recognizing.Transcript.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Recognizing.Transcript} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Recognizing.Transcript.toObject = function(includeInstance, msg) {
  var f, obj = {
    finalText: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partialText: jspb.Message.getFieldWithDefault(msg, 2, ""),
    alternativesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Recognizing.Transcript}
 */
proto.Recognizing.Transcript.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Recognizing.Transcript;
  return proto.Recognizing.Transcript.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Recognizing.Transcript} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Recognizing.Transcript}
 */
proto.Recognizing.Transcript.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFinalText(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartialText(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAlternatives(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Recognizing.Transcript.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Recognizing.Transcript.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Recognizing.Transcript} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Recognizing.Transcript.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFinalText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartialText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAlternativesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string final_text = 1;
 * @return {string}
 */
proto.Recognizing.Transcript.prototype.getFinalText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Recognizing.Transcript} returns this
 */
proto.Recognizing.Transcript.prototype.setFinalText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string partial_text = 2;
 * @return {string}
 */
proto.Recognizing.Transcript.prototype.getPartialText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Recognizing.Transcript} returns this
 */
proto.Recognizing.Transcript.prototype.setPartialText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string alternatives = 3;
 * @return {!Array<string>}
 */
proto.Recognizing.Transcript.prototype.getAlternativesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Recognizing.Transcript} returns this
 */
proto.Recognizing.Transcript.prototype.setAlternativesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Recognizing.Transcript} returns this
 */
proto.Recognizing.Transcript.prototype.addAlternatives = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Recognizing.Transcript} returns this
 */
proto.Recognizing.Transcript.prototype.clearAlternativesList = function() {
  return this.setAlternativesList([]);
};


/**
 * optional Transcript transcript = 1;
 * @return {?proto.Recognizing.Transcript}
 */
proto.Recognizing.prototype.getTranscript = function() {
  return /** @type{?proto.Recognizing.Transcript} */ (
    jspb.Message.getWrapperField(this, proto.Recognizing.Transcript, 1));
};


/**
 * @param {?proto.Recognizing.Transcript|undefined} value
 * @return {!proto.Recognizing} returns this
*/
proto.Recognizing.prototype.setTranscript = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Recognizing} returns this
 */
proto.Recognizing.prototype.clearTranscript = function() {
  return this.setTranscript(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Recognizing.prototype.hasTranscript = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Status status = 2;
 * @return {!proto.Recognizing.Status}
 */
proto.Recognizing.prototype.getStatus = function() {
  return /** @type {!proto.Recognizing.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Recognizing.Status} value
 * @return {!proto.Recognizing} returns this
 */
proto.Recognizing.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 audio_level = 3;
 * @return {number}
 */
proto.Recognizing.prototype.getAudioLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Recognizing} returns this
 */
proto.Recognizing.prototype.setAudioLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto);
